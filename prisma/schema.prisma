generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  firstname     String
  lastname      String
  authToken     String?
  userol        UserRol
  designRequest designRequest[]
  pago          pago[]
  userProfile   userProfile?
  collections   collections[]
}

model userProfile {
  id             Int     @id @default(autoincrement())
  user_id        Int     @unique
  foto_de_perfil String?
  domicilio      String
  postal_code    String
  country        String
  municipio String?
  provincia String?
  cif            String?
  nombre_empresa String?
  user           User    @relation(fields: [user_id], references: [id])
}

model collections {
  id            Int             @id @default(autoincrement())
  name          String
  description   String?
  owner_id      Int
  user          User            @relation(fields: [owner_id], references: [id])
  designRequest designRequest[]
}

model designRequest {
  id                 Int           @id @default(autoincrement())
  request_user       Int
  collection_id      Int
  name               String
  SKU                String        @unique
  format             FormatDesign
  otro               String?
  model_nft          String?
  status             STATUSREQUEST
  mediaPath          String?
  delivery_date      DateTime?
  price              Float?
  checkout_stripe_id String?
  mediaLinkExternalFile String?
  productType PRODUCTO?
  prenda PRENDA?
  collection         collections   @relation(fields: [collection_id], references: [id])
  user               User          @relation(fields: [request_user], references: [id])
  pago               pago[]
}

model pago {
  id           Int           @id @default(autoincrement())
  request_user Int
  desing_id    Int
  amount       Float
  checkout_id  String
  date         DateTime
  design       designRequest @relation(fields: [desing_id], references: [id])
  user         User          @relation(fields: [request_user], references: [id])
}

model priceFormato {
  id             Int          @id @default(autoincrement())
  formato        FormatDesign @unique
  price          Float
}
model priceProducto {
  id             Int          @id @default(autoincrement())
  producto        PRODUCTO @unique
  price          Float
}
model relationPrendaPrecio {
  id             Int          @id @default(autoincrement())
  producto        PRODUCTO 
  prenda          PRENDA @unique
  }

enum UserRol {
  ADMIN
  CLIENT
}
enum PRENDA {
  ABRIGOS_BLAZERS
  ACCESORIOS
  BANADORES_BIKINIS
  BOLSOS
  CAMISAS
  CAMISETAS_POLOS
  CARDIGANS_JERSEYS
  CHAQUETAS_CAZADORAS
  FALDAS
  JEANS_PANTALONES
  JOYAS_BISUTERIE
  SHORTS_BERMUDAS
  SPORT
  SUDADERAS
  TOPS_BODIES
  TRAJES_SMOKING
  VESTIDOS
  VESTIDO_INVITADAS
  OTROS
}
enum PRODUCTO {
  A
  B
  C
}
enum FormatDesign {
  FACTORY_3D
  MARKETING_3DAVATAR
  MARKETING_3D
  RENDER_360
  RENDER_RUNWAY
  INSTAGRAM
  TIKTOK
  SNAP
  ROBLOX
  ZEPETO
  OTRO
}

enum STATUSREQUEST {
  BORRADOR
  PAGO_PENDIENTE
  ENVIADO
  EN_PROCESO
  ENTREGADO
  REVISION
  FINALIZADO
}
